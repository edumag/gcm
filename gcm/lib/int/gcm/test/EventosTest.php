<?php

// Call EventosTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
   define("PHPUnit_MAIN_METHOD", "EventosTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

// require_once dirname(__FILE__).'/../lib/Eventos.php';
//// require_once dirname(__FILE__).'/../lib/helpers.php';

DEFINE('GCM_DIR',dirname(__FILE__).'/../../../../../gcm/');
require(GCM_DIR.'inicio.php');

/**
 * Test class for Eventos.
 * Generated by PHPUnit_Util_Skeleton on 2010-03-05 at 11:13:16.
 */

class EventosTest extends PHPUnit_Framework_TestCase {

   private $e;     ///< Eventos

   /**
    * Runs the test methods of this class.
    *
    * @access public
    * @static
    */

   public static function main() {

      require_once "PHPUnit/TextUI/TestRunner.php";

      $suite  = new PHPUnit_Framework_TestSuite("EventosTest");
      $result = PHPUnit_TextUI_TestRunner::run($suite);
   }

   /**
    * Sets up the fixture, for example, open a network connection.
    * This method is called before a test is executed.
    *
    * @access protected
    */

   protected function setUp() {

      /* Creamos archivos en /tmp para simular archivos de eventos */

      $dir_ejemplo = '/tmp/test_eventos/';
      if ( is_dir($dir_ejemplo)  ) `rm -fr $dir_ejemplo.'/*'`; 
      if ( !is_dir($dir_ejemplo)  ) mkdir($dir_ejemplo);
      if ( !is_dir($dir_ejemplo.'modulo1')  ) mkdir($dir_ejemplo.'modulo1');
      if ( !is_dir($dir_ejemplo.'modulo2')  ) mkdir($dir_ejemplo.'modulo2');
      if ( !is_dir($dir_ejemplo.'modulo1/lib')  ) mkdir($dir_ejemplo.'modulo1/lib');
      if ( !is_dir($dir_ejemplo.'modulo2/lib')  ) mkdir($dir_ejemplo.'modulo2/lib');

      /* construimos archivo para pruebas */

      $contenido = "\n".'<?php ';
      $contenido .= "\n\$eventos['evento1']['accion1'][1]='';";
      $contenido .= "\n\$eventos['evento2']['accion2'][1]='';";
      $contenido .= "\n\$eventos['evento3']['accion3'][1]='';";
      $contenido .= "\n".'?>';
      file_put_contents($dir_ejemplo.'modulo1/eventos_admin.php', $contenido);

      $contenido = "\n".'<?php ';
      $contenido .= "\n\$eventos['evento4']['accion1'][1]='';";
      $contenido .= "\n\$eventos['evento5']['accion2'][1]='';";
      $contenido .= "\n\$eventos['evento6']['accion3'][1]='';";
      $contenido .= "\n\$cEventos['evento6']='unico';";
      $contenido .= "\n".'?>';
      file_put_contents($dir_ejemplo.'modulo1/eventos_usuario.php', $contenido);

      $contenido = "\n".'<?php ';
      $contenido .= "\n\$eventos['evento1']['accion1'][1]='';";
      $contenido .= "\n\$eventos['evento2']['accion2'][1]='';";
      $contenido .= "\n\$eventos['evento3']['accion3'][1]='';";
      $contenido .= "\n".'?>';
      file_put_contents($dir_ejemplo.'modulo2/eventos_admin.php', $contenido);

      $contenido = "\n".'<?php ';
      $contenido .= "\n\$eventos['evento4']['accion1'][1]='';";
      $contenido .= "\n\$eventos['evento5']['accion2'][1]='';";
      $contenido .= "\n\$eventos['evento6']['accion3'][1]='';";
      $contenido .= "\n".'?>';
      file_put_contents($dir_ejemplo.'modulo2/eventos_usuario.php', $contenido);

      $contenido = "\n".'<?php ';
      $contenido .= "\nclass modulo1 {";
      $contenido .= "\nfunction accion1(\$e) {";
      $contenido .= "\nglobal \$_GLOBALS;";
      $contenido .= "\n\$_GLOBALS['eventos'][\$e]['Modulo1'] = 'accion1';";
      $contenido .= "\n}";
      $contenido .= "\nfunction accion2(\$e) {";
      $contenido .= "\nglobal \$_GLOBALS;";
      $contenido .= "\n\$_GLOBALS['eventos'][\$e]['Modulo1'] = 'accion2';";
      $contenido .= "\n}";
      $contenido .= "\nfunction accion3(\$e) {";
      $contenido .= "\nglobal \$_GLOBALS;";
      $contenido .= "\n\$_GLOBALS['eventos'][\$e]['Modulo1'] = 'accion3';";
      $contenido .= "\n}";
      $contenido .= "\n}";
      $contenido .= "\n".'?>';
      file_put_contents($dir_ejemplo.'modulo1/lib/Modulo1.php', $contenido);

      $contenido = "\n".'<?php ';
      $contenido .= "\nclass modulo2 {";
      $contenido .= "\nfunction accion1(\$e) {";
      $contenido .= "\nglobal \$_GLOBALS;";
      $contenido .= "\n\$_GLOBALS['eventos'][\$e]['Modulo2'] = 'accion1';";
      $contenido .= "\n}";
      $contenido .= "\nfunction accion2(\$e) {";
      $contenido .= "\nglobal \$_GLOBALS;";
      $contenido .= "\n\$_GLOBALS['eventos'][\$e]['Modulo2'] = 'accion2';";
      $contenido .= "\n}";
      $contenido .= "\nfunction accion3(\$e) {";
      $contenido .= "\nglobal \$_GLOBALS;";
      $contenido .= "\n\$_GLOBALS['eventos'][\$e]['Modulo2'] = 'accion3';";
      $contenido .= "\n}";
      $contenido .= "\n}";
      $contenido .= "\n".'?>';
      file_put_contents($dir_ejemplo.'modulo2/lib/Modulo2.php', $contenido);

      $this->e = new Eventos($dir_ejemplo,FALSE); // Solo eventos de usuario
      $this->a = new Eventos($dir_ejemplo,TRUE);  // Con eventos de administrador
   }

   /**
    * Tears down the fixture, for example, close a network connection.
    * This method is called after a test is executed.
    *
    * @access protected
    */
   protected function tearDown() {
   }

   public function testLeer_eventos() {

      $this->assertFalse(empty($this->e->eventos), 'Hay eventos');
      $this->assertFalse(empty($this->a->eventos), 'Hay eventos');

   }

   public function testVerificar_evento() {

      $this->assertTrue($this->e->verificar_evento('evento4'),'Verificar evento usuario');
      $this->assertTrue($this->a->verificar_evento('evento4'),'Verificar evento usuario');
      $this->assertTrue($this->a->verificar_evento('evento2'),'Verificar evento usuario');
   }

   public function testLanzarEvento() {

      $this->assertTrue($this->e->lanzarEvento('evento4'),'Lanzar evento usuario');
      $this->assertTrue($this->a->lanzarEvento('evento5'),'Lanzar evento usuario');
      $this->assertTrue($this->a->lanzarEvento('evento2'),'Lanzar evento usuario');
   }

   public function testComportamientos() {

      global $_GLOBALS;

      /* unico */

      $_GLOBALS = array();

      // echo "\nevento3 unico para modulo1";
      $this->a->cEventos['evento3']['unico'] = 'modulo1';
      $this->a->lanzarEvento('evento3');
      $num_eventos = count($_GLOBALS['eventos']['evento3']);

      $this->assertTrue($num_eventos == 1,'Evento unico');

      /* anular */

      // echo "\nAnular evento4";
      $this->e->cEventos['evento4']['anular'] = 'modulo1';
      $this->e->lanzarEvento('evento4');
      $num_eventos = count($_GLOBALS['eventos']['evento4']);
      $this->assertTrue($num_eventos == 0,'Evento anulado');

      // echo "\n GLOBALS:\n<pre>" ; print_r($_GLOBALS) ; echo "\n</pre>\n"; // DEV  
   }
}

// Call EventosTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "EventosTest::main") {
   EventosTest::main();
}
?>
